<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="cs">
  <title>Ukázka <quote>callouts</quote></title>
  
  <example>
    <title>Malá exkurze do SGML DTD pro jazyk HTML</title>
    
    <programlisting>&lt;!ELEMENT UL - - (LI)+ &gt;                    <co xml:id="co.element"/>
&lt;!ATTLIST UL                                <co xml:id="co.atributy"/>
  type       (disc|square|circle) #IMPLIED  <co xml:id="co.atribut"/>
  &gt;</programlisting>
    <calloutlist>
      <callout arearefs="co.element">
        <para>Deklarace elementu <tag class="element">ul</tag>
(nečíslovaný seznam). Element musí mít počáteční i ukončovací tag a
může obsahovat pouze elementy <tag class="element">li</tag>.</para>
      </callout>
      <callout arearefs="co.atributy">
        <para>Deklarace atributů použitelných u <tag class="element">ul</tag>.</para>
      </callout>
      <callout arearefs="co.atribut">
        <para>Atribut <tag class="attribute">type</tag> může
mít jednu z hodnot <symbol>disc</symbol>, <symbol>square</symbol>
a <symbol>circle</symbol>.</para>
      </callout>
    </calloutlist>
  </example>

  <para>Další ukázka ukazuje možnost označení oblastí pomocí
souřadnic. Je převzata z testovacích dokumentů pro DSSSL styly.</para>

  <programlistingco xml:lang="en">
    <areaspec>
      <area xml:id="prologue" coords="1"/>
      <area xml:id="skipeof" coords="4"/>
      <areaset xml:id="xreq">
        <area xml:id="require1" coords="9"/>
        <area xml:id="require2" coords="10"/>
      </areaset>
      <area xml:id="use" coords="11 12"/>
      <area xml:id="funccall" coords="27"/>
    </areaspec>
    <programlisting><![CDATA[@rem = '--*-Perl-*--
@echo off
perl.exe %_batchname %$
goto endofperl
@rem ';

# Compress mail...

require 'n:/home/nwalsh/lib/cygnus.pl';
require 'timelocal.pl';
use Cwd;

select (STDERR); $| = 1;
select (STDOUT); $| = 1;

@DIRS = ("/home/nwalsh/Mail");
while (@DIRS) {
    $dir = shift @DIRS;
    opendir (DIR, $dir);
    while ($fname = readdir(DIR)) {
        $file = "$dir/$fname";
        next if ! -d $file;
        next if $fname =~ /^\.\.?$/;

        print "$file\n";
        push (@DIRS, $file);
        &compress ($file);
    }
}

exit;]]></programlisting>
    <calloutlist>
      <callout arearefs="prologue">
        <para>The prologue handles embedding a Perl script in a DOS
batch file.</para>
      </callout>
      <callout arearefs="skipeof">
        <para>The <literal>goto</literal> statement, interpreted by
the DOS batch file interpreter, skips over the body of the Perl
script.</para>
      </callout>
      <callout arearefs="require1">
        <para>The <literal>require</literal> statement sources in
external program fragments.</para>
      </callout>
      <callout arearefs="use">
        <para>The <literal>use</literal> statement is similar, but has
additional utility.  It is a Perl5 function.  (Note that this callout
area specifies both a line and a column.)</para>
      </callout>
      <callout arearefs="funccall">
        <para>This is a user subroutine call.</para>
      </callout>
    </calloutlist>
  </programlistingco>
  
</chapter>